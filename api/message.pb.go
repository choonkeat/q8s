// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/message.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/message.proto

It has these top-level messages:
	Message
	Acknowledgement
	ReadRequest
	ReadResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Acknowledgement struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
}

func (m *Acknowledgement) Reset()                    { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string            { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()               {}
func (*Acknowledgement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Acknowledgement) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ReadRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ReadResponse struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Offset     int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	NextOffset int64  `protobuf:"varint,3,opt,name=nextOffset" json:"nextOffset,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadResponse) GetNextOffset() int64 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "api.Message")
	proto.RegisterType((*Acknowledgement)(nil), "api.Acknowledgement")
	proto.RegisterType((*ReadRequest)(nil), "api.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "api.ReadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Publisher service

type PublisherClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Acknowledgement, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := grpc.Invoke(ctx, "/api.Publisher/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publisher service

type PublisherServer interface {
	Publish(context.Context, *Message) (*Acknowledgement, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/message.proto",
}

// Client API for Consumer service

type ConsumerClient interface {
	Consume(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Consumer_ConsumeClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Consume(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Consumer_ConsumeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Consumer_serviceDesc.Streams[0], c.cc, "/api.Consumer/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_ConsumeClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type consumerConsumeClient struct {
	grpc.ClientStream
}

func (x *consumerConsumeClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consumer service

type ConsumerServer interface {
	Consume(*ReadRequest, Consumer_ConsumeServer) error
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).Consume(m, &consumerConsumeServer{stream})
}

type Consumer_ConsumeServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type consumerConsumeServer struct {
	grpc.ServerStream
}

func (x *consumerConsumeServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _Consumer_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/message.proto",
}

func init() { proto.RegisterFile("api/message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xb7, 0x56, 0xb6, 0x3a, 0x16, 0x74, 0x07, 0x11, 0x59, 0x50, 0x24, 0x20, 0xe8, 0xa5,
	0x2b, 0xf5, 0x2a, 0x82, 0x78, 0x16, 0x25, 0x47, 0x6f, 0x59, 0x3b, 0xbb, 0x06, 0xdb, 0x24, 0x76,
	0x52, 0xf4, 0xe7, 0x0b, 0x49, 0x0e, 0x41, 0xf4, 0x36, 0xef, 0xcd, 0x37, 0x84, 0x2f, 0xb0, 0x50,
	0x4e, 0xaf, 0x06, 0x62, 0x56, 0x5b, 0x6a, 0xdc, 0x68, 0xbd, 0xc5, 0x52, 0x39, 0x2d, 0xce, 0xa0,
	0x7a, 0x8a, 0x2d, 0x22, 0xec, 0x76, 0xca, 0xab, 0xd3, 0xe2, 0xa2, 0xb8, 0xaa, 0x65, 0x98, 0xc5,
	0x35, 0x1c, 0x3e, 0xbc, 0x7d, 0x18, 0xfb, 0xd5, 0x53, 0xb7, 0xa5, 0x81, 0x8c, 0xc7, 0x13, 0x98,
	0xdb, 0xcd, 0x86, 0xc9, 0x07, 0xb0, 0x94, 0x29, 0x89, 0x4b, 0x38, 0x90, 0xa4, 0x3a, 0x49, 0x9f,
	0x13, 0xf1, 0xff, 0xd8, 0x2b, 0xd4, 0x11, 0x63, 0x67, 0x0d, 0xff, 0xf9, 0x6a, 0x76, 0xbb, 0x93,
	0xdf, 0xe2, 0x39, 0x80, 0xa1, 0x6f, 0xff, 0x1c, 0x77, 0x65, 0xd8, 0x65, 0x4d, 0x7b, 0x07, 0xfb,
	0x2f, 0xd3, 0xba, 0xd7, 0xfc, 0x4e, 0x23, 0xae, 0xa0, 0x4a, 0x01, 0xeb, 0x46, 0x39, 0xdd, 0x24,
	0xcf, 0xe5, 0x71, 0x48, 0xbf, 0xb4, 0xc4, 0xac, 0xbd, 0x87, 0xbd, 0x47, 0x6b, 0x78, 0x1a, 0x68,
	0xc4, 0x16, 0xaa, 0x34, 0xe3, 0x51, 0xc0, 0x33, 0xb5, 0xe5, 0x22, 0x6b, 0xa2, 0x85, 0x98, 0xdd,
	0x14, 0xeb, 0x79, 0xf8, 0xd6, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x87, 0x4a, 0x82,
	0x6b, 0x01, 0x00, 0x00,
}
